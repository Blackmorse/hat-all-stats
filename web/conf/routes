# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~
GET     /lang                       controllers.HomeController.lang(lang: String)

GET     /worldOverview              controllers.WorldController.overview()
GET     /api/league/:leagueId                 controllers.RestLeagueController.getLeagueData(leagueId: Int)

GET     /                           controllers.HomeController.index
GET     /league                     controllers.LeagueController.overview(leagueId: Int)
GET     /league/bestTeams           controllers.LeagueController.bestTeams(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /league/bestLeagueUnits     controllers.LeagueController.bestLeagueUnits(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/playerStats         controllers.LeagueController.playerStats(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/teamState           controllers.LeagueController.teamState(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeam: Option[Long] ?= None)
GET     /league/playerState         controllers.LeagueController.playerState(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/formalTeamStats     controllers.LeagueController.formalTeamStats(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/search              controllers.LeagueController.search(leagueId: Int)
GET     /league/processSearch       controllers.LeagueController.processSearch(leagueId: Int)
GET     /league/searchResult        controllers.LeagueController.searchResult(leagueId: Int, teamName: String)
GET     /league/promotions          controllers.LeagueController.promotions(leagueId: Int)

GET     /divisionlevel              controllers.DivisionLevelController.bestTeams(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /divisionlevel/bestLeagueUnits      controllers.DivisionLevelController.bestLeagueUnits(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/playerStats  controllers.DivisionLevelController.playerStats(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/teamState    controllers.DivisionLevelController.teamState(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /divisionlevel/playerState  controllers.DivisionLevelController.playerState(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/formalTeamStats  controllers.DivisionLevelController.formalTeamStats(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /leagueLevelUnitByName        controllers.LeagueUnitController.bestTeamsByName(leagueUnitName: String, leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit        controllers.LeagueUnitController.bestTeams(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/playerStats    controllers.LeagueUnitController.playerStats(leagueUnitId: Long,  statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/teamState      controllers.LeagueUnitController.teamState(leagueUnitOd: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/playerState    controllers.LeagueUnitController.playerState(leagueUnitOd: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /team/teamOverview          controllers.TeamController.teamOverview(teamId: Long)
GET     /team/matches               controllers.TeamController.matches(teamId: Long)
GET     /team/playerStats           controllers.TeamController.playerStats(teamId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /team/playerState           controllers.TeamController.playerState(teamId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /error/league               controllers.ErrorController.errorForLeague(leagueId: Int)

POST    /loader/leagueRound         controllers.LoaderController.leagueRound(season: Int, leagueId: Int, round: Int)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
