# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~
GET     /api/teamSearchByName       controllers.WorldController.searchByName(name: String)
GET     /api/teamSearchById         controllers.WorldController.searchById(id: Long)
GET     /api/league/:leagueId/leagueUnitName/:leagueUnitName    controllers.RestLeagueUnitController.leagueUnitIdByName(leagueUnitName: String, leagueId: Int)

GET     /api/health                     controllers.WorldController.health()
GET     /api/hoRequests             controllers.WorldController.hoRequests()

GET     /api/world/teamHatstats         controllers.WorldController.teamHatstats(restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/world/playerTsiSalary      controllers.WorldController.playersTsiSalary(restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/world/playerRatings        controllers.WorldController.playerRatings(restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/world/topMatches           controllers.WorldController.topMatches(restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/world/surprisingMatches    controllers.WorldController.surprisingMatches(restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/world/dreamTeam            controllers.WorldController.dreamTeam(season: Int, sortBy: String, statsType: models.web.StatsType)
GET     /api/world/oldestTeams    controllers.WorldController.oldestTeams(restStatisticsParameters: models.web.RestStatisticsParameters)

GET     /api/league/:leagueId                 controllers.RestLeagueController.getLeagueData(leagueId: Int)
GET     /api/league/:leagueId/teamHatstats      controllers.RestLeagueController.teamHatstats(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/leagueUnits       controllers.RestLeagueController.leagueUnits(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/playerGoalGames   controllers.RestLeagueController.playerGoalGames(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerCards       controllers.RestLeagueController.playerCards(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerTsiSalary       controllers.RestLeagueController.playerTsiSalary(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerRatings       controllers.RestLeagueController.playerRatings(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerInjuries       controllers.RestLeagueController.playerInjuries(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamSalaryTsi       controllers.RestLeagueController.teamSalaryTsi(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedInLastMatch: Boolean)
GET     /api/league/:leagueId/teamCards       controllers.RestLeagueController.teamCards(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamRatings       controllers.RestLeagueController.teamRatings(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamAgeInjuries       controllers.RestLeagueController.teamAgeInjuries(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamGoalPoints       controllers.RestLeagueController.teamGoalPoints(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedAllMatches: Boolean ?= false)
GET     /api/league/:leagueId/teamPowerRatings       controllers.RestLeagueController.teamPowerRatings(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamFanclubFlags       controllers.RestLeagueController.teamFanclubFlags(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamStreakTrophies       controllers.RestLeagueController.teamStreakTrophies(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/topMatches       controllers.RestLeagueController.topMatches(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/surprisingMatches       controllers.RestLeagueController.surprisingMatches(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/matchSpectators       controllers.RestLeagueController.matchSpectators(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/oldestTeams       controllers.RestLeagueController.oldestTeams(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/promotions        controllers.RestLeagueController.promotions(leagueId: Int)
GET     /api/league/:leagueId/dreamTeam         controllers.RestLeagueController.dreamTeam(season: Int, leagueId: Int, sortBy: String, statsType: models.web.StatsType)

GET     /api/league/:leagueId/divisionLevel/:divisionLevel  controllers.RestDivisionLevelController.getDivisionLevelData(leagueId: Int, divisionLevel: Int)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamHatstats controllers.RestDivisionLevelController.teamHatstats(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/leagueUnits  controllers.RestDivisionLevelController.leagueUnits(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerGoalGames  controllers.RestDivisionLevelController.playerGoalGames(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerCards  controllers.RestDivisionLevelController.playerCards(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerTsiSalary  controllers.RestDivisionLevelController.playerTsiSalary(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerRatings  controllers.RestDivisionLevelController.playerRatings(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerInjuries  controllers.RestDivisionLevelController.playerInjuries(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamSalaryTsi  controllers.RestDivisionLevelController.teamSalaryTsi(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedInLastMatch: Boolean)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamCards  controllers.RestDivisionLevelController.teamCards(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamRatings  controllers.RestDivisionLevelController.teamRatings(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamAgeInjuries  controllers.RestDivisionLevelController.teamAgeInjuries(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamGoalPoints  controllers.RestDivisionLevelController.teamGoalPoints(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedAllMatches: Boolean ?= false)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamPowerRatings  controllers.RestDivisionLevelController.teamPowerRatings(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamFanclubFlags  controllers.RestDivisionLevelController.teamFanclubFlags(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamStreakTrophies  controllers.RestDivisionLevelController.teamStreakTrophies(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/topMatches  controllers.RestDivisionLevelController.topMatches(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/surprisingMatches  controllers.RestDivisionLevelController.surprisingMatches(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/matchSpectators  controllers.RestDivisionLevelController.matchSpectators(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/oldestTeams      controllers.RestDivisionLevelController.oldestTeams(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/promotions  controllers.RestDivisionLevelController.promotions(leagueId: Int, divisionLevel: Int)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/dreamTeam         controllers.RestDivisionLevelController.dreamTeam(season: Int, leagueId: Int, divisionLevel: Int, sortBy: String, statsType: models.web.StatsType)

GET     /api/leagueUnit/:leagueUnitId   controllers.RestLeagueUnitController.getLeagueUnitData(leagueUnitId: Int)
GET     /api/leagueUnit/:leagueUnitId/teamHatstats  controllers.RestLeagueUnitController.teamHatstats(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamPositions controllers.RestLeagueUnitController.teamPositions(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/playerGoalGames   controllers.RestLeagueUnitController.playerGoalGames(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerCards   controllers.RestLeagueUnitController.playerCards(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerTsiSalary   controllers.RestLeagueUnitController.playerTsiSalary(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerRatings   controllers.RestLeagueUnitController.playerRatings(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerInjuries   controllers.RestLeagueUnitController.playerInjuries(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamSalaryTsi   controllers.RestLeagueUnitController.teamSalaryTsi(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedInLastMatch: Boolean)
GET     /api/leagueUnit/:leagueUnitId/teamCards   controllers.RestLeagueUnitController.teamCards(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamRatings   controllers.RestLeagueUnitController.teamRatings(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamAgeInjuries   controllers.RestLeagueUnitController.teamAgeInjuries(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamPowerRatings   controllers.RestLeagueUnitController.teamPowerRatings(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamFanclubFlags   controllers.RestLeagueUnitController.teamFanclubFlags(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamStreakTrophies   controllers.RestLeagueUnitController.teamStreakTrophies(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/topMatches   controllers.RestLeagueUnitController.topMatches(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/surprisingMatches   controllers.RestLeagueUnitController.surprisingMatches(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/matchSpectators   controllers.RestLeagueUnitController.matchSpectators(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/oldestTeams       controllers.RestLeagueUnitController.oldestTeams(leagueUnitId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/promotions   controllers.RestLeagueUnitController.promotions(leagueUnitId: Int)
GET     /api/leagueUnit/:leagueUnitId/dreamTeam         controllers.RestLeagueUnitController.dreamTeam(season: Int, leagueUnitId: Int, sortBy: String, statsType: models.web.StatsType)

GET     /api/team/:teamId           controllers.RestTeamController.getTeamData(teamId: Long)
GET     /api/team/:teamId/teamRankings      controllers.RestTeamController.teamRankings(teamId: Long, season: Int)
GET     /api/team/:teamId/nearestMatches    controllers.RestTeamController.nearestMatches(teamId: Long)
GET     /api/team/:teamId/playerGoalGames   controllers.RestTeamController.playerGoalGames(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerCards   controllers.RestTeamController.playerCards(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerTsiSalary   controllers.RestTeamController.playerTsiSalary(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerRatings   controllers.RestTeamController.playerRatings(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerInjuries   controllers.RestTeamController.playerInjuries(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/topMatches   controllers.RestTeamController.topMatches(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/surprisingMatches   controllers.RestTeamController.surprisingMatches(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/matchSpectators   controllers.RestTeamController.matchSpectators(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/promotions   controllers.RestTeamController.promotions(teamId: Long)
GET     /api/team/:teamId/teamMatches   controllers.RestTeamController.teamMatches(teamId: Long, season: Int)
GET     /api/team/stats/teamsFoundedSameDate  controllers.RestTeamController.teamsFoundedSameDate(period: service.HattrickPeriod, leagueId: Int, foundedDate: Long)
GET     /api/team/stats/compareTeams        controllers.RestTeamController.compareTeams(teamId1: Long, teamId2: Long)
GET     /api/team/analyzer/teamAndOpponentMatches       controllers.AnalyzerController.currentTeamAndOpponentTeamMatches(teamId: Long)
GET     /api/team/analyzer/opponentTeamMatches      controllers.AnalyzerController.opponentTeamMatches(teamId: Long)
GET     /api/team/analyzer/combineMatches       controllers.AnalyzerController.combineMatches(firstTeamId: Long, firstMatchId: Long, secondTeamId: Long, secondMatchId: Long)

GET     /api/overview/numberOverview    controllers.RestOverviewController.numberOverview(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/formations    controllers.RestOverviewController.formations(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/averagesOverview    controllers.RestOverviewController.averagesOverview(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/surprisingMatches    controllers.RestOverviewController.surprisingMatches(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topHatstatsTeams    controllers.RestOverviewController.topHatstatsTeams(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topSalaryTeams    controllers.RestOverviewController.topSalaryTeams(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topMatches    controllers.RestOverviewController.topMatches(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topSalaryPlayers    controllers.RestOverviewController.topSalaryPlayers(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topRatingPlayers    controllers.RestOverviewController.topRatingPlayers(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/totalOverview    controllers.RestOverviewController.totalOverview(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/matchAttendance   controllers.RestOverviewController.topMatchAttendance(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topVictories   controllers.RestOverviewController.topTeamVictories(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topSeasonScorers   controllers.RestOverviewController.topSeasonScorers(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/worldData    controllers.RestOverviewController.getWorldData()
GET     /api/overview/teamNumbersChart  controllers.RestOverviewController.teamNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/playerNumbersChart  controllers.RestOverviewController.playerNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/goalNumbersChart  controllers.RestOverviewController.goalNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/injuryNumbersChart  controllers.RestOverviewController.injuryNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/yellowCardNumbersChart  controllers.RestOverviewController.yellowCardNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/redCardNumbersChart  controllers.RestOverviewController.redCardNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/formationsChart  controllers.RestOverviewController.formationsChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/averageHatstatNumbersChart  controllers.RestOverviewController.averageHatstatNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/averageSpectatorNumbersChart  controllers.RestOverviewController.averageSpectatorNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/averageGoalNumbersChart  controllers.RestOverviewController.averageGoalNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/newTeamNumbersChart  controllers.RestOverviewController.newTeamNumbersChart(leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)

GET     /api/matches/similarMatches controllers.MatchController.similarMatches(matchId: Long, accuracy: Double)
+ nocsrf
POST     /api/matches/similarMatchesByRatings controllers.MatchController.similarMatchesByRatings(accuracy: Double)
GET     /api/matches/singleMatch    controllers.MatchController.singleMatch(matchId: Long)

POST    /loader/leagueRound         controllers.LoaderController.leagueRound(season: Int, leagueId: Int, round: Int)
POST    /loader/scheduleInfo        controllers.LoaderController.scheduleInfo()
POST    /loader/loadingStarted      controllers.LoaderController.loadingStarted(leagueId: Int)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
