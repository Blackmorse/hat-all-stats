# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~
GET     /lang                       controllers.HomeController.lang(lang: String)

GET     /swagger.json           controllers.ApiHelpController.getResources
GET     /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

GET     /api/teamSearchByName       controllers.WorldController.searchByName(name: String)
GET     /api/league/:leagueId/leagueUnitName/:leagueUnitName    controllers.RestLeagueUnitController.leagueUnitIdByName(leagueUnitName: String, leagueId: Int)

GET     /worldOverview              controllers.WorldController.overview()

GET     /api/health                     controllers.WorldController.health()
GET     /api/hoRequests             controllers.WorldController.hoRequests()

GET     /api/world/teamHatstats         controllers.WorldController.teamHatstats(restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/world/playerTsiSalary      controllers.WorldController.playersTsiSalary(restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/world/playerRatings        controllers.WorldController.playerRatings(restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/world/topMatches           controllers.WorldController.topMatches(restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/world/surprisingMatches    controllers.WorldController.surprisingMatches(restStatisticsParameters: models.web.RestStatisticsParameters)

GET     /api/league/:leagueId                 controllers.RestLeagueController.getLeagueData(leagueId: Int)
GET     /api/league/:leagueId/teamHatstats      controllers.RestLeagueController.teamHatstats(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/leagueUnits       controllers.RestLeagueController.leagueUnits(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/playerGoalGames   controllers.RestLeagueController.playerGoalGames(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerCards       controllers.RestLeagueController.playerCards(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerTsiSalary       controllers.RestLeagueController.playerTsiSalary(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerRatings       controllers.RestLeagueController.playerRatings(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/playerInjuries       controllers.RestLeagueController.playerInjuries(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamSalaryTsi       controllers.RestLeagueController.teamSalaryTsi(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedInLastMatch: Boolean)
GET     /api/league/:leagueId/teamCards       controllers.RestLeagueController.teamCards(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamRatings       controllers.RestLeagueController.teamRatings(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamAgeInjuries       controllers.RestLeagueController.teamAgeInjuries(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamGoalPoints       controllers.RestLeagueController.teamGoalPoints(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedAllMatches: Boolean ?= false)
GET     /api/league/:leagueId/teamPowerRatings       controllers.RestLeagueController.teamPowerRatings(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamFanclubFlags       controllers.RestLeagueController.teamFanclubFlags(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/teamStreakTrophies       controllers.RestLeagueController.teamStreakTrophies(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/topMatches       controllers.RestLeagueController.topMatches(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/surprisingMatches       controllers.RestLeagueController.surprisingMatches(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/matchSpectators       controllers.RestLeagueController.matchSpectators(leagueId: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/promotions        controllers.RestLeagueController.promotions(leagueId: Int)
GET     /api/league/:leagueId/dreamTeam         controllers.RestLeagueController.dreamTeam(season: Int, leagueId: Int, sortBy: String, statsType: models.web.StatsType)

GET     /api/league/:leagueId/divisionLevel/:divisionLevel  controllers.RestDivisionLevelController.getDivisionLevelData(leagueId: Int, divisionLevel: Int)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamHatstats controllers.RestDivisionLevelController.teamHatstats(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/leagueUnits  controllers.RestDivisionLevelController.leagueUnits(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerGoalGames  controllers.RestDivisionLevelController.playerGoalGames(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerCards  controllers.RestDivisionLevelController.playerCards(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerTsiSalary  controllers.RestDivisionLevelController.playerTsiSalary(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerRatings  controllers.RestDivisionLevelController.playerRatings(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/playerInjuries  controllers.RestDivisionLevelController.playerInjuries(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamSalaryTsi  controllers.RestDivisionLevelController.teamSalaryTsi(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedInLastMatch: Boolean)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamCards  controllers.RestDivisionLevelController.teamCards(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamRatings  controllers.RestDivisionLevelController.teamRatings(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamAgeInjuries  controllers.RestDivisionLevelController.teamAgeInjuries(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamGoalPoints  controllers.RestDivisionLevelController.teamGoalPoints(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters, playedAllMatches: Boolean ?= false)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamPowerRatings  controllers.RestDivisionLevelController.teamPowerRatings(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamFanclubFlags  controllers.RestDivisionLevelController.teamFanclubFlags(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/teamStreakTrophies  controllers.RestDivisionLevelController.teamStreakTrophies(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/topMatches  controllers.RestDivisionLevelController.topMatches(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/surprisingMatches  controllers.RestDivisionLevelController.surprisingMatches(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/matchSpectators  controllers.RestDivisionLevelController.matchSpectators(leagueId: Int, divisionLevel: Int, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/promotions  controllers.RestDivisionLevelController.promotions(leagueId: Int, divisionLevel: Int)
GET     /api/league/:leagueId/divisionLevel/:divisionLevel/dreamTeam         controllers.RestDivisionLevelController.dreamTeam(season: Int, leagueId: Int, divisionLevel: Int, sortBy: String, statsType: models.web.StatsType)

GET     /api/leagueUnit/:leagueUnitId   controllers.RestLeagueUnitController.getLeagueUnitData(leagueUnitId: Long)
GET     /api/leagueUnit/:leagueUnitId/teamHatstats  controllers.RestLeagueUnitController.teamHatstats(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamPositions controllers.RestLeagueUnitController.teamPositions(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/playerGoalGames   controllers.RestLeagueUnitController.playerGoalGames(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerCards   controllers.RestLeagueUnitController.playerCards(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerTsiSalary   controllers.RestLeagueUnitController.playerTsiSalary(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerRatings   controllers.RestLeagueUnitController.playerRatings(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/leagueUnit/:leagueUnitId/playerInjuries   controllers.RestLeagueUnitController.playerInjuries(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamSalaryTsi   controllers.RestLeagueUnitController.teamSalaryTsi(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playedInLastMatch: Boolean)
GET     /api/leagueUnit/:leagueUnitId/teamCards   controllers.RestLeagueUnitController.teamCards(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamRatings   controllers.RestLeagueUnitController.teamRatings(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamAgeInjuries   controllers.RestLeagueUnitController.teamAgeInjuries(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamPowerRatings   controllers.RestLeagueUnitController.teamPowerRatings(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamFanclubFlags   controllers.RestLeagueUnitController.teamFanclubFlags(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/teamStreakTrophies   controllers.RestLeagueUnitController.teamStreakTrophies(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/topMatches   controllers.RestLeagueUnitController.topMatches(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/surprisingMatches   controllers.RestLeagueUnitController.surprisingMatches(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/matchSpectators   controllers.RestLeagueUnitController.matchSpectators(leagueUnitId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/leagueUnit/:leagueUnitId/promotions   controllers.RestLeagueUnitController.promotions(leagueUnitId: Long)
GET     /api/leagueUnit/:leagueUnitId/dreamTeam         controllers.RestLeagueUnitController.dreamTeam(season: Int, leagueUnitId: Int, sortBy: String, statsType: models.web.StatsType)

GET     /api/team/:teamId           controllers.RestTeamController.getTeamData(teamId: Long)
GET     /api/team/:teamId/teamRankings      controllers.RestTeamController.teamRankings(teamId: Long)
GET     /api/team/:teamId/nearestMatches    controllers.RestTeamController.nearestMatches(teamId: Long)
GET     /api/team/:teamId/playerGoalGames   controllers.RestTeamController.playerGoalGames(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerCards   controllers.RestTeamController.playerCards(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerTsiSalary   controllers.RestTeamController.playerTsiSalary(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerRatings   controllers.RestTeamController.playerRatings(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters, playersParameters: models.web.PlayersParameters)
GET     /api/team/:teamId/playerInjuries   controllers.RestTeamController.playerInjuries(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/topMatches   controllers.RestTeamController.topMatches(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/surprisingMatches   controllers.RestTeamController.surprisingMatches(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/matchSpectators   controllers.RestTeamController.matchSpectators(teamId: Long, restStatisticsParameters: models.web.RestStatisticsParameters)
GET     /api/team/:teamId/promotions   controllers.RestTeamController.promotions(teamId: Long)
GET     /api/team/:teamId/teamMatches   controllers.RestTeamController.teamMatches(teamId: Long, season: Int)

GET     /api/overview/numberOverview    controllers.RestOverviewController.numberOverview(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/formations    controllers.RestOverviewController.formations(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/averagesOverview    controllers.RestOverviewController.averagesOverview(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/surprisingMatches    controllers.RestOverviewController.surprisingMatches(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topHatstatsTeams    controllers.RestOverviewController.topHatstatsTeams(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topSalaryTeams    controllers.RestOverviewController.topSalaryTeams(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topMatches    controllers.RestOverviewController.topMatches(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topSalaryPlayers    controllers.RestOverviewController.topSalaryPlayers(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topRatingPlayers    controllers.RestOverviewController.topRatingPlayers(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/totalOverview    controllers.RestOverviewController.totalOverview(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/matchAttendance   controllers.RestOverviewController.topMatchAttendance(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topVictories   controllers.RestOverviewController.topTeamVictories(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/topSeasonScorers   controllers.RestOverviewController.topSeasonScorers(season: Int, round: Int, leagueId: Option[Int] ?= None, divisionLevel: Option[Int] ?= None)
GET     /api/overview/worldData    controllers.RestOverviewController.getWorldData()

GET     /api/matches/similarMatches controllers.MatchController.similarMatches(matchId: Long, accuracy: Double)

GET     /                           controllers.HomeController.index
GET     /league                     controllers.LeagueController.overview(leagueId: Int)
GET     /league/bestTeams           controllers.LeagueController.bestTeams(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /league/bestLeagueUnits     controllers.LeagueController.bestLeagueUnits(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/playerStats         controllers.LeagueController.playerStats(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/teamState           controllers.LeagueController.teamState(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeam: Option[Long] ?= None)
GET     /league/playerState         controllers.LeagueController.playerState(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/formalTeamStats     controllers.LeagueController.formalTeamStats(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/search              controllers.LeagueController.search(leagueId: Int)
GET     /league/processSearch       controllers.LeagueController.processSearch(leagueId: Int)
GET     /league/searchResult        controllers.LeagueController.searchResult(leagueId: Int, teamName: String)
GET     /league/promotions          controllers.LeagueController.promotions(leagueId: Int)
GET     /league/fanclubFlags        controllers.LeagueController.fanclubFlags(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/streakTrophies      controllers.LeagueController.streakTrophies(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/powerRatings        controllers.LeagueController.powerRatings(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /league/bestMatches         controllers.LeagueController.bestMatches(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /league/surprisingMatches   controllers.LeagueController.surprisingMatches(leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /divisionlevel              controllers.DivisionLevelController.bestTeams(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /divisionlevel/bestLeagueUnits      controllers.DivisionLevelController.bestLeagueUnits(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/playerStats  controllers.DivisionLevelController.playerStats(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/teamState    controllers.DivisionLevelController.teamState(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /divisionlevel/playerState  controllers.DivisionLevelController.playerState(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/formalTeamStats  controllers.DivisionLevelController.formalTeamStats(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/fanclubFlags controllers.DivisionLevelController.fanclubFlags(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/streakTrophies   controllers.DivisionLevelController.streakTrophies(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionlevel/powerRatings     controllers.DivisionLevelController.powerRatings(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None, selectedTeamId: Option[Long] ?= None)
GET     /divisionLevel/bestMatches      controllers.DivisionLevelController.bestMatches(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /divisionLevel/surprisingMatches    controllers.DivisionLevelController.surprisingMatches(leagueId: Int, divisionLevel: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /leagueLevelUnitByName        controllers.LeagueUnitController.bestTeamsByName(leagueUnitName: String, leagueId: Int, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit        controllers.LeagueUnitController.bestTeams(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/playerStats    controllers.LeagueUnitController.playerStats(leagueUnitId: Long,  statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/teamState      controllers.LeagueUnitController.teamState(leagueUnitOd: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/playerState    controllers.LeagueUnitController.playerState(leagueUnitOd: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/fanclubFlags   controllers.LeagueUnitController.fanclubFlags(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/streakTrophies controllers.LeagueUnitController.streakTrophies(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/powerRatings   controllers.LeagueUnitController.powerRatings(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/bestMatches    controllers.LeagueUnitController.bestMatches(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /leagueLevelUnit/surprisingMatches  controllers.LeagueUnitController.surprisingMatches(leagueUnitId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /team/teamOverview          controllers.TeamController.teamOverview(teamId: Long)
GET     /team/matches               controllers.TeamController.matches(teamId: Long)
GET     /team/playerStats           controllers.TeamController.playerStats(teamId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)
GET     /team/playerState           controllers.TeamController.playerState(teamId: Long, statisticsParametersOpt: Option[models.web.StatisticsParameters] ?= None)

GET     /error/league               controllers.ErrorController.errorForLeague(leagueId: Int)

POST    /loader/leagueRound         controllers.LoaderController.leagueRound(season: Int, leagueId: Int, round: Int)
POST    /loader/scheduleInfo        controllers.LoaderController.scheduleInfo()
POST    /loader/loadingStarted      controllers.LoaderController.loadingStarted(leagueId: Int)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
